# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oya4EWfMn6YiYuZ1-dQ991bkDrw5Rqsw

#Importing Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing different libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""#Reading Data
Getting data from "students_scores" csv file
"""

#Reading data from dataset
dataset="/content/student_scores - student_scores.csv.txt"
data=pd.read_csv(dataset)
print("We have imported data sucessfully")
data.tail()

"""Now we'll plot graph "Hours Against Scores" to find relationship between them."""

# Plotting 
data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Scores')  
plt.xlabel('Hours Studied')  
plt.ylabel('Scored')  
plt.grid()
plt.show()

"""It is clear from plot that there is a positive linear relation between Hours studied and Scores

# Preparing data
"""

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1:2].values

"""Splitting up the data into training and test sets.
 We'll do this by using Scikit-Learn's built-in train_test_split() method:
"""

#Importing train_test_split from  sklearn.model_selection
from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.2, random_state=0) 
print("Data after splitting")
print("X_train\n",X_train,"\n X_test\n", X_test,"\ny_train\n", y_train,"\n y_test\n", y_test)

"""#Training Algorithm
Time to train our algo
"""

#Importing LinearRegression
from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training completed")

"""Plotting graph and Regression line"""

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""#Making Predictions
Now that we have trained our algorithm, let us make some predictions
"""

# Testing data - In Hours
print(X_test) 
 # Predicting the scores
y_pred = regressor.predict(X_test)

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test[:,0], 'Predicted': y_pred[:,0]})  
df

# You can also test with your own data
hours=9.25
own_pred = regressor.predict([[hours]])
print("No of Hours = {}".format(9.25))
print("Predicted Score = {}".format(own_pred[0]))

from  sklearn import metrics
mae=metrics.mean_absolute_error(y_test,y_pred)
print("Mean absolute error : ",mae)
#MSE
mse=metrics.mean_squared_error(y_test,y_pred)
print("Mean Squared error : ",mse)